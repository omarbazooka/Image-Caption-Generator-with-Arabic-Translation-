import os
import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
from PIL import Image, ImageTk
from transformers import BlipProcessor, BlipForConditionalGeneration
from transformers import MarianMTModel, MarianTokenizer
import nltk
import threading
import time

# ุชุญููู ุงูุฃุฏูุงุช ุงููุงุฒูุฉ ูู ููุชุจุฉ nltk
nltk.download('punkt')

# ุชุญููู ููุฏููุงุช BLIP ู Helsinki ุงูุฎุงุตุฉ ุจุงูุชุฑุฌูุฉ
caption_processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")  # ุชุญููู ูุนุงูุฌ BLIP
caption_model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")  # ุชุญููู ููุฏูู BLIP
translation_model_name = "Helsinki-NLP/opus-mt-tc-big-en-ar"  # ุชุนููู ููุฏูู ุงูุชุฑุฌูุฉ ูู ุงูุฅูุฌููุฒูุฉ ุฅูู ุงูุนุฑุจูุฉ
tokenizer = MarianTokenizer.from_pretrained(translation_model_name)  # ุชุญููู tokenizer ุงูุฎุงุต ุจุงูุชุฑุฌูุฉ
model = MarianMTModel.from_pretrained(translation_model_name)  # ุชุญููู ููุฏูู ุงูุชุฑุฌูุฉ

# ุฏุงูุฉ ูุชูููุฏ ุงููุงุจุชุดู (ุงููุตู) ูู ุงูุตูุฑุฉ
def generate_caption(image_path):
    raw_image = Image.open(image_path).convert('RGB')  # ูุชุญ ุงูุตูุฑุฉ ูุชุญููููุง ุฅูู ุชูุณูู RGB
    inputs = caption_processor(images=raw_image, return_tensors="pt")  # ุชุฌููุฒ ุงูุตูุฑุฉ ูููุฏูู BLIP
    out = caption_model.generate(**inputs)  # ุชูููุฏ ุงููุตู ุจุงุณุชุฎุฏุงู ุงูููุฏูู
    caption = caption_processor.decode(out[0], skip_special_tokens=True)  # ุชุญููู ุงููุชูุฌุฉ ุฅูู ูุต
    return caption  # ุฅุฑุฌุงุน ุงููุต ุงููุงุชุฌ

# ุฏุงูุฉ ูุชุฑุฌูุฉ ุงููุตูุต ูู ุงูุฅูุฌููุฒูุฉ ุฅูู ุงูุนุฑุจูุฉ
def translate_to_arabic(text):
    inputs = tokenizer.prepare_seq2seq_batch([text], return_tensors="pt")  # ุชุฌููุฒ ุงููุต ููุชุฑุฌูุฉ
    translated = model.generate(**inputs)  # ุฅุฌุฑุงุก ุงูุชุฑุฌูุฉ ุจุงุณุชุฎุฏุงู ููุฏูู MarianMT
    return tokenizer.decode(translated[0], skip_special_tokens=True)  # ุฅุฑุฌุงุน ุงูุชุฑุฌูุฉ ุจุนุฏ ูู ุงูุชุดููุฑ

# ุชุนุฑูู ูุฆุฉ ุงูุชุทุจูู ุงูุชู ุชุญุชูู ุนูู ุงููุงุฌูุฉ ุงูุฑุณูููุฉ
class CaptionApp:
    def __init__(self, root):
        self.root = root  # ุชุฎุฒูู ูุงูุฐุฉ ุงูุชุทุจูู
        self.root.title("๐ผ๏ธ Image Caption Generator")  # ุชุนููู ุนููุงู ุงููุงูุฐุฉ
        self.root.geometry("720x650")  # ุชุนููู ุฃุจุนุงุฏ ุงููุงูุฐุฉ
        self.root.configure(bg='#f4f4f4')  # ุชุนููู ููู ุฎูููุฉ ุงููุงูุฐุฉ

        # ุฅุถุงูุฉ ุชุณููุฉ ูุดุฑุญ ุงููุทููุจ ูู ุงููุณุชุฎุฏู
        self.label = tk.Label(root, text="๐ธ Select an image for a caption and Arabic translation.", font=("Arial", 16), bg='#f4f4f4', fg="#222")
        self.label.pack(pady=15)  # ุฅุถุงูุฉ ุงูุชุณููุฉ ูู ุงููุงูุฐุฉ ูุน ูุณุงูุฉ ุจุงุฏุฆุฉ

        # ุฅุถุงูุฉ ููุงู ูุนุฑุถ ุงูุตูุฑุฉ ุงูุชู ูุฎุชุงุฑูุง ุงููุณุชุฎุฏู
        self.img_label = tk.Label(root, bg='#f4f4f4')
        self.img_label.pack()

        # ุชุตููู ุณุชุงูู ูุฎุตุต ููู progress bar (ุดุฑูุท ุงูุชูุฏู)
        style = ttk.Style()  # ุฅูุดุงุก ุณุชุงูู ุฌุฏูุฏ
        style.theme_use("default")  # ุงุณุชุฎุฏุงู ุงูุซูู ุงูุงูุชุฑุงุถู
        style.configure("green.Horizontal.TProgressbar", troughcolor="#e0e0e0", background="#4CAF50", thickness=20, borderwidth=0)  # ุชุฎุตูุต ูุธูุฑ ุดุฑูุท ุงูุชูุฏู

        # ุฅุถุงูุฉ ุดุฑูุท ุงูุชูุฏู
        self.progress = ttk.Progressbar(root, mode='indeterminate', length=350, style="green.Horizontal.TProgressbar")  # ุดุฑูุท ุงูุชูุฏู ุจููุท ุบูุฑ ูุญุฏุฏ

        # ุฅุถุงูุฉ ุชุณููุฉ ูุนุฑุถ ุงููุตู ุจุงููุบุฉ ุงูุฅูุฌููุฒูุฉ
        self.en_caption_label = tk.Label(root, text="English Caption:", font=("Arial", 12), bg='#f4f4f4', fg="#333")
        self.en_caption_label.pack(pady=5)  # ุฅุถุงูุฉ ุงูุชุณููุฉ ูู ุงููุงูุฐุฉ ูุน ูุณุงูุฉ ุจุงุฏุฆุฉ

        # ุฅุถุงูุฉ ุชุณููุฉ ูุนุฑุถ ุงูุชุฑุฌูุฉ ุจุงูุนุฑุจูุฉ
        self.ar_caption_label = tk.Label(root, text="Arabic Translation:", font=("Arial", 12), bg='#f4f4f4', fg="#333")
        self.ar_caption_label.pack(pady=5)  # ุฅุถุงูุฉ ุงูุชุณููุฉ ูู ุงููุงูุฐุฉ ูุน ูุณุงูุฉ ุจุงุฏุฆุฉ

        # ุฅุถุงูุฉ ุฒุฑ ูุงุฎุชูุงุฑ ุงูุตูุฑุฉ ูู ุงููุธุงู
        self.choose_btn = tk.Button(root, text="๐ Choose Image", command=self.choose_image, font=("Arial", 12), bg="#4CAF50", fg="white", width=20)
        self.choose_btn.pack(pady=20)  # ุฅุถุงูุฉ ุงูุฒุฑ ูู ุงููุงูุฐุฉ ูุน ูุณุงูุฉ ุจุงุฏุฆุฉ

        # ุฅุถุงูุฉ ููุงู ูุนุฑุถ ุฑุณุงุฆู ุงูุฎุทุฃ
        self.error_label = tk.Label(root, text="", font=("Arial", 12), bg='#f4f4f4', fg="red")
        self.error_label.pack(pady=5)  # ุฅุถุงูุฉ ุงูุชุณููุฉ ูู ุงููุงูุฐุฉ ูุน ูุณุงูุฉ ุจุงุฏุฆุฉ

    # ุฏุงูุฉ ูุงุฎุชูุงุฑ ุงูุตูุฑุฉ ูู ุฌูุงุฒ ุงูููุจููุชุฑ
    def choose_image(self):
        file_path = filedialog.askopenfilename(filetypes=[["Image files", "*.jpg *.jpeg *.png"]])  # ูุชุญ ูุงูุฐุฉ ูุงุฎุชูุงุฑ ููู ุตูุฑุฉ
        if file_path:  # ุฅุฐุง ุชู ุงุฎุชูุงุฑ ุตูุฑุฉ
            img = Image.open(file_path)  # ูุชุญ ุงูุตูุฑุฉ
            img.thumbnail((350, 350))  # ุชุตุบูุฑ ุงูุตูุฑุฉ
            img_tk = ImageTk.PhotoImage(img)  # ุชุญููู ุงูุตูุฑุฉ ุฅูู ุชูุณูู ููุงุณุจ ูู tkinter
            self.img_label.config(image=img_tk)  # ุชุนููู ุงูุตูุฑุฉ ูู ุงูุชุณููุฉ ุงูุฎุงุตุฉ ุจุนุฑุถ ุงูุตูุฑุฉ
            self.img_label.image = img_tk  # ุชุฎุฒูู ุงูุตูุฑุฉ ููู ูุง ูุชู ุญุฐููุง

            self.progress.pack(pady=15)  # ุฅุธูุงุฑ ุดุฑูุท ุงูุชูุฏู
            self.progress.start()  # ุจุฏุก ุดุฑูุท ุงูุชูุฏู
            self.choose_btn.config(state='disabled')  # ุชุนุทูู ุฒุฑ ุงุฎุชูุงุฑ ุงูุตูุฑุฉ ุฃุซูุงุก ุงููุนุงูุฌุฉ
            self.error_label.config(text="")  # ูุณุญ ุฃู ุฑุณุงุฆู ุฎุทุฃ ุณุงุจูุฉ
            threading.Thread(target=self.process_image, args=(file_path,)).start()  # ุชุดุบูู ุฏุงูุฉ ุงููุนุงูุฌุฉ ูู ุฎูุท ูููุตู

    # ุฏุงูุฉ ููุนุงูุฌุฉ ุงูุตูุฑุฉ: ุชูููุฏ ุงููุตู ูุชุฑุฌูุชู
    def process_image(self, file_path):
        try:
            time.sleep(2)  # ุฅุถุงูุฉ ุชุฃุฎูุฑ ููุญุงูุงุฉ ุงููุนุงูุฌุฉ
            caption = generate_caption(file_path)  # ุชูููุฏ ุงููุตู ููุตูุฑุฉ
            translation = translate_to_arabic(caption)  # ุชุฑุฌูุฉ ุงููุตู ุฅูู ุงูุนุฑุจูุฉ

            # ุชุญุฏูุซ ุงูุชุณููุฉ ูุนุฑุถ ุงููุตู ุจุงููุบุฉ ุงูุฅูุฌููุฒูุฉ ูุงูุชุฑุฌูุฉ ุจุงูุนุฑุจูุฉ
            self.en_caption_label.config(text=f"English Caption: {caption}")
            self.ar_caption_label.config(text=f"Arabic Translation: {translation}")
        except Exception as e:
            # ูู ุญุงูุฉ ุญุฏูุซ ุฎุทุฃุ ุนุฑุถ ุฑุณุงูุฉ ุงูุฎุทุฃ ูู ุงููุงุฌูุฉ
            self.en_caption_label.config(text="โ Error in captioning")
            self.ar_caption_label.config(text="โ Error in translation")
            self.error_label.config(text=f"Error: {str(e)}")  # ุนุฑุถ ุฑุณุงูุฉ ุงูุฎุทุฃ
        finally:
            self.progress.stop()  # ุฅููุงู ุดุฑูุท ุงูุชูุฏู
            self.progress.pack_forget()  # ุฅุฎูุงุก ุดุฑูุท ุงูุชูุฏู
            self.choose_btn.config(state='normal')  # ุฅุนุงุฏุฉ ุชูููู ุฒุฑ ุงุฎุชูุงุฑ ุงูุตูุฑุฉ

# ุชุดุบูู ุงูุชุทุจูู
if __name__ == "__main__":  # ุฅุฐุง ูุงู ูุฐุง ูู ุงูุณูุฑุจุช ุงูุฑุฆูุณู ุงูุฐู ูุชู ุชุดุบููู
    root = tk.Tk()  # ุฅูุดุงุก ูุงูุฐุฉ tkinter ุฌุฏูุฏุฉ
    app = CaptionApp(root)  # ุฅูุดุงุก ูุซูู ูู ูุฆุฉ ุงูุชุทุจูู
    root.mainloop()  # ุชุดุบูู ุงูุชุทุจูู ูุฅุธูุงุฑ ุงููุงูุฐุฉ
